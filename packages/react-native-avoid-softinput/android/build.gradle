buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has('kotlinVersion') ? rootProject.ext.get('kotlinVersion') : project.properties['AvoidSoftinput_kotlinVersion']

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath("com.android.tools.build:gradle:8.0.2")
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.diffplug.spotless:spotless-plugin-gradle:6.22.0"
  }
}

// Add this function in case you don't have it already
def isNewArchitectureEnabled() {
  return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

if (project == rootProject) {
  apply from: 'spotless.gradle'
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply from: "$projectDir/react-native-helpers.gradle"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"

  def reactNativeDirectory = project.ext.resolveReactNativeDirectory()

  react {
    reactNativeDir = file(reactNativeDirectory)
    codegenDir = file("${file(reactNativeDirectory).getParentFile()}/react-native-codegen")
  }
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['AvoidSoftinput_' + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['AvoidSoftinput_' + name]).toInteger()
}

def reactNativeArchitectures() {
  def value = project.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  if (supportsNamespace()) {
    namespace "com.reactnativeavoidsoftinput"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  buildFeatures {
    buildConfig = true
  }

  defaultConfig {
    minSdkVersion 21
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += ['src/newarch/java', "${project.buildDir}/generated/source/codegen/java"]
      } else {
        java.srcDirs += ['src/oldarch/java']
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable 'GradleCompatible'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault('kotlinVersion')
def kotlin_coroutines_version = getExtOrDefault('kotlinCoroutinesVersion')
def androidX_core_ktx_version = getExtOrDefault('androidXCoreKtxVersion')

dependencies {
  if (project.ext.shouldConsumeReactNativeFromMavenCentral()) {
    implementation "com.facebook.react:react-android" // Set by the React Native Gradle Plugin
  } else {
    // noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+' // From node_modules
  }
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
  implementation "androidx.core:core-ktx:$androidX_core_ktx_version"
}
